import { call, put, takeLatest } from 'redux-saga/effects';
import { createUserSuccess, createUserFailure, loginSuccess, loginFailure, desactivateUserSuccess, desactivateUserFailure, getUserSuccess, getUserFailure, editUserSuccess, editUserFailure, fetchUsersSuccess, fetchUsersFailure } from './slice';
import { checkUserService, createUserService, loginUserService, userDesactivateService, getOneUserService, userEditService, allUsersService } from '../../services/users';

function* createUser(action){
    try{
        console.log("Verificando usuário no DB...");

        const userData = {
            mail: action.payload.mail,
        }
        const checkResponse = yield call(checkUserService, userData);

        if(checkResponse < 1){
            try{
                console.log("Criando usuário no DB...");
            
                // Chama o service com os dados do usuário
                const createUserData = {
                    fullname: action.payload.fullname,
                    mail: action.payload.mail,
                    password: action.payload.password,
                };
                
                const response = yield call(createUserService, createUserData);
                // Dispara a ação de sucesso
                yield put(createUserSuccess(response));   
            }
            
            catch(error){
                const errorMessage = error.message || "Erro desconhecido";
                yield put(createUserFailure(errorMessage));          // Passando o erro para a action;
                console.error("Erro ao criar usuário!", error);
            }
        }
        else{
            yield put(createUserFailure("Erro: O usuário já existe no sistema!"));
            console.error("O usuário já existe no sistema!");
        }
    }

    catch(error){
        yield put(createUserFailure(error.message));        //Passando o erro para a action;
        console.error("Erro ao checar usuário!", error);
    } 
}

//Funcao que chama API Rest de login;
function* loginUser(action) {
    try {
        console.log("Verificando no DB...");

        const userData = {
            mail: action.payload.mail,
            password: action.payload.password,
        };
        
        // Chama o service que faz a requisição à API
        const response = yield call(loginUserService, userData);

        // Verifica o status e os dados
        if(response.status === 200 && response.data){
            console.log("Usuário encontrado com sucesso!");
            yield put(loginSuccess(response.data));     //Salva no Redux
        } 
        else{
            yield put(loginFailure("Usuário ou senha incorreto!"));
        }

    } catch (error) {
        yield put(loginFailure(error.message));
        console.error("Erro ao realizar login: ", error);
    }
};

function* userDesactivate(action){
    try{
        console.log("Buscando usuário do DB...");

        const userData = {
            id: action.payload.id
        };
        const response = yield call(userDesactivateService, userData);
        yield put(desactivateUserSuccess(response.data));
    }
    
    catch(error){
        yield put(desactivateUserFailure(error.message));
        console.error("Erro ao desativar usuário!", error);
    }
};

function* getOneUser(action){
    try {
        console.log("Buscando usuário no DB...");

        const userData = {
            id: action.payload.id,
        };
        const response = yield call(getOneUserService, userData);
        yield put(getUserSuccess(response.data));
    } 
    
    catch(error){
        yield put(getUserFailure(error.message));
        console.error("Erro ao desativar usuário!", error);
    }
};

function* userEdit(action){
    try{
        console.log("Verificando usuário no DB...");

        const userData = {
            mail: action.payload.mail,
        }
        const checkResponse = yield call(checkUserService, userData);

        if(checkResponse < 1){
            try{
                console.log("Editando usuário no DB...");

                const editUserData = {
                    id: action.payload.id,
                    fullname: action.payload.fullname,
                    mail: action.payload.mail,
                    administrator: action.payload.administrator,
                    password: action.payload.password,
                };

                const response = yield call(userEditService, editUserData);
                yield put(editUserSuccess(response.data));
            }
            
            catch(error){
                const errorMessage = error.message || "Erro desconhecido";
                yield put(createUserFailure(errorMessage));
                console.error("Erro ao criar usuário!", error);
            }
        }
        else{
            yield put(createUserFailure("Erro: O usuário já existe no sistema!"));
            console.error("O usuário já existe no sistema!");
        }
    }

    catch(error){
        yield put(editUserFailure(error.message));  //Passando o erro para a action;
        console.error("Erro ao criar usuário!", error);
    }
};

function* allUsers(){
    try{
        console.log("Buscando usuários no DB...");

        const response = yield call(allUsersService);
        console.log("allUsers: ", response);
        yield put(fetchUsersSuccess(response));
    }

    catch(error){
        yield put(fetchUsersFailure(error.message));
        console.error("Erro ao buscar usuários!", error);
    }
};

//Observa a acao de login;
function* userSaga()
{
    yield takeLatest('user/createUser', createUser);
    yield takeLatest('user/loginRequest', loginUser);
    yield takeLatest('user/desactivateUser', userDesactivate);
    yield takeLatest('user/getUser', getOneUser);
    yield takeLatest('user/editUser', userEdit); 
    yield takeLatest('user/fetchUsers', allUsers); 
}

export default userSaga;