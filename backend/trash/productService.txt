const tableProducts = require("../model/productModel");
const getCurrentDateTime = require("../utils/dateUtils");
const createError = require("../utils/createError");

const allDate = getCurrentDateTime();


async function productCreate(productName, productWay, productPrice, productDescription, productType, next){
    try{
        const product = await tableProducts.create({
            name: productName,
            way: productWay,
            price: productPrice,
            description: productDescription,
            type: productType,        
            created_at: allDate,
        });

        if(!product){
            throw await createError("Erro ao criar no DB...", 404);
        }
        console.log("BackEnd: ", product);
        return product;
    }
    
    catch(error){
        next(error.status || createError("Erro interno ao criar produto.", 500));
    }    
};


async function productEdit(productID, productName, productWay, productPrice, productDescription, productType, next){
    try{
        const product = await tableProducts.findByPk(productID);

        if(!product){
            next(createError("Erro ao buscar produto no DB...", 404));
            return;
        }

        product.name = productName;
        product.way = productWay;
        product.price = productPrice;
        product.description = productDescription;
        product.type = productType;
        
        const saveProduct = await product.save();

        if(!saveProduct){
            next(createError("Erro ao salvar produto no DB...", 404));
            return;
        }

        console.log("BackEnd: ", product);
        return saveProduct;
    }

    catch(error){
        next(error.status || createError("Erro interno ao editar produto.", 500));
    }
};


async function getProduct(id, next){
    try{
        const product = await tableProducts.findOne(id);

        if(!product){
            next(createError("Erro ao buscar produto no DB...", 404));
            return;
        }

        console.log("BackEnd: ", product);
        return product;
    }
    catch(error){
        next(error.status || createError("Erro interno ao buscar produto.", 500));
    }
};


async function selectAll(productType, next){
    try{
        const product = await tableProducts.findAll({
            where: { type: productType }
        });

        if(!product){
            next(createError("Erro ao buscar os produtos no DB...", 404));
            return;
        }

        console.log("BackEnd: ", product);
        return product;
    }
    catch(error){
        next(error.status || createError("Erro interno ao buscar produto.", 500));
    }
};


async function deleteProduct(id, next){
    try{
        const product = await tableProducts.findByPk(id);

        if(!product){
            next(createError("Erro ao deletar o produto no DB...", 404));
            return;
        }

        await product.destroy();

        if(!product){
            next(createError("Erro ao deletar produto no DB...", 404));
            return;
        }

        console.log("BackEnd: ", product);
        return product;
    }
    
    catch(error){
        next(error.status || createError("Erro interno ao deletar produto.", 500));
    }
}


module.exports = { productCreate, productEdit, getProduct, selectAll, deleteProduct };






