const tableUsers = require("../model/userModel");
const getCurrentDateTime = require("../utils/dateUtils");
const createError = require("../utils/createError");

const allDate = getCurrentDateTime();


async function userLogin(userMail, userPassword, next){
    try{
        const selectUser = await tableUsers.findOne({
            where: {
                mail: userMail,
                password: userPassword,
            },
            attributes: { exclude: ['password'] } // Remove o campo senha
        });            
        
        if(!selectUser){
            next(createError("Usuário não encontrado no DB...", 404));
            return;                      //Evita retorno adicional após o erro;
        }

        console.log("BackEnd: ", selectUser);
        return selectUser;
    } 
    
    catch(error){
        next(error.status || createError("Erro interno ao verificar login.", 500));
    }    
};


async function userCreate(userFullname, userMail, userPassword, next){
    try{
        const createUser = await tableUsers.create({
            fullname: userFullname,
            mail: userMail,
            password: userPassword,
            created_at: allDate,
        });

        if(!createUser){
            next(createError("Erro ao criar no DB...", 404));
            return;
        }

        console.log("BackEnd: ", createUser);
        return createUser;
    }
    
    catch(error){
        next(error.status || createError("Erro interno ao criar usuário.", 500));
    }
};


async function userEdit(userID, userFullname, userMail, userPassword, next){
    try{
        const editUser = await tableUsers.findByPk(userID);

        if(!editUser){
            next(createError("Usuário não encontrado no DB...", 404));
            return;  
        }

        editUser.fullname   = userFullname;
        editUser.mail       = userMail;
        editUser.password   = userPassword;

        const saveUser      = await editUser.save();
        return saveUser;
    }

    catch(error){
        next(error.status || createError("Erro interno ao editar usuário.", 500));
    }
};


async function userDelete(userID, next){
    try{
        const userDelete = await tableUsers.findByPk(userID);
     
        if(!userDelete){
            next(createError("Usuário não encontrado no DB...", 404));
            return;
        }

        try{
            const actionDelete = await userDelete.destroy();

            if(!actionDelete){
                next(createError("Erro ao deletar usuário no DB...", 404));
                return;
            }

            return actionDelete;        
        }

        catch(error){
            next(error.status || createError("Erro interno ao deletar usuário.", 500));
        }
    }

    catch(error){
        error.status = error.status || 500;
        next(error);
    }   
};


async function getOneUser(userID, next){
    try {
        const getUser = await tableUsers.findOne({
            where: { id: userID },                  //Busca pelo ID
            attributes: { exclude: ['password'] }   //Exclui o campo senha
        });

        if(!getUser){
            next(createError("Usuário não encontrado no DB...", 404));
            return;
        }

        return getUser;
    }
    
    catch(error){
        next(error.status || createError("Erro interno ao buscar um usuário.", 500));
    }
}

async function getAllUser(next){
    try {
        const selectAll = await tableUsers.findAll({
            attributes: { exclude: ['password'] }       // Exclui a coluna de senha
        });

        if(!selectAll){
            next(createError("Erro ao buscar usuários do DB...", 404));
            return;
        }

        return selectAll;
    }
    
    catch(error){
        next(error.status || createError("Erro interno ao buscar todos os usuários.", 500));
    } 
}


module.exports = { userLogin, userCreate, userEdit, userDelete, getOneUser, getAllUser };