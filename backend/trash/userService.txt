const tableUsers = require("../model/userModel");
const getCurrentDateTime = require("../utils/dateUtils");
const createError = require('../utils/createError');

const allDate = getCurrentDateTime();


async function userLogin(userMail, userPassword){
    try{
        const selectUser = await tableUsers.findOne({
            where: {
                mail: userMail,
                password: userPassword,
            },
            attributes: { exclude: ['password'] } // Remove o campo senha
        });            
        
        if(!selectUser){
            console.log("Dados | mail: " + userMail + " password: " + userPassword);
            //throw new Error("Usuário não encontrado no DB...");
            throw createError("Usuário não encontrado no DB... Verifique seu email e senha!", 404); // Usando createError
        }

        console.log("BackEnd: ", selectUser);
        return selectUser;
    } 
    
    catch(error){
        throw error;
    }    
};


async function userCreate(userFullname, userMail, userPassword, userAdministrator){
    try{
        const createUser = await tableUsers.create({
            fullname: userFullname,
            mail: userMail,
            password: userPassword,
            administrator: userAdministrator,
            created_at: allDate,
        });

        if(!createUser){
            throw new Error("Erro ao criar no DB..."); // Erro simples
        }

        console.log("BackEnd: ", createUser);
        return createUser;
    }
    
    catch(error){
        //Deixe o erro ser lançado para o controlador
        throw error;
    }
};


async function userEdit(userID, userFullname, userMail, userPassword){
    try{
        const editUser = await tableUsers.findByPk(userID);

        if(!editUser){
            throw new Error("Usuário não encontrado no DB...");
        }

        editUser.fullname   = userFullname;
        editUser.mail       = userMail;
        editUser.password   = userPassword;

        const saveUser      = await editUser.save();
        return saveUser;
    }

    catch(error){
        throw error;
    }
};


async function userDelete(userID, next){
    try{
        const userDelete = await tableUsers.findByPk(userID);
     
        if(!userDelete){
            throw new Error("Usuário não encontrado no DB...");
        }

        try{
            const actionDelete = await userDelete.destroy();

            if(!actionDelete){
                throw new Error("Erro ao deletar usuário no DB...");
            }

            return actionDelete;        
        }

        catch(error){
            throw error;
        }
    }

    catch(error){
        throw error;
    }   
};


async function getOneUser(userID, next){
    try {
        const getUser = await tableUsers.findOne({
            where: { id: userID },                  //Busca pelo ID
            attributes: { exclude: ['password'] }   //Exclui o campo senha
        });

        if(!getUser){
            throw new Error("Usuário não encontrado no DB...");
        }

        return getUser;
    }
    
    catch(error){
        throw new Error("Erro interno ao buscar um usuário.");
    }
}

async function getAllUser(next){
    try {
        const selectAll = await tableUsers.findAll({
            attributes: { exclude: ['password'] }       // Exclui a coluna de senha
        });

        if(!selectAll){
            throw new Error("Erro ao buscar usuários do DB...");
        }

        return selectAll;
    }
    
    catch(error){
        throw error;
    } 
}


module.exports = { userLogin, userCreate, userEdit, userDelete, getOneUser, getAllUser };